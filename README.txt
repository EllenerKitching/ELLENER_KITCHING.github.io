Ellener Kitching16403267CSY1018 – Web Development – Assignment 1.Total hours spent on project20hrs 30mins.What I have correctly implemented•	The Google Web Fonts.•	Unordered list for navigation bar.•	A running colour theme throughout.•	A solid house style for all of the pages.•	Styling separate header tags.•	Including an image in the index.html page.•	Subheadings which stand out within the main content of the page.•	Block quote within the biography.•	A horizontal navigation bar with hover elements.•	One CSS page for all of the HTML pages.•	Contact form with placeholders.•	Two columns within the contact page.•	Font awesome icons.•	Submit button.What have I not correctly implemented or could be improved/changed•Who have I discussed/collaborated the assignment withThomas Roseo	Helped me fix the margin issue with the headers at the beginning of the process.o	Advised me to have only once central CSS ‘style sheet’ instead of one for each page.o	Advised me to have a navigation bar instead of individual links sitting in the page. Development of the siteI began this project with creating all of the html pages, as well as the main CSS stylesheet and an images folder.I thought it would be important to create an overall house style for the site and so I began by producing a header and footer, a <h1> tag heading and also a navigation bar.For the header I nested <h5> tags into <header> tags. In the stylesheet I then used the ‘. header’ class to specify a width, colour, padding for the text and a text colour. Above this I stated the font-family I wanted to use for the <h5> tag. For the footer I took similar steps although I used the <footer> tag. I did not have any text within the footer and therefore did not need to add any extra tags or code in-between the <footer> tags. In the CSS I specified a width and height for the footer as well as a matching white background colour as the header. In addition to this I had to add in ‘margin-bottom: 0;’ to this class to ensure that the footer was kept at the bottom of the interface.I wanted to have a clear colour scheme running throughout my site and so I found a set of matching colours online* and used the hex codes provided in my stylesheet to set a background colour and font colour for example.I have used a Google web font within my pages to style the <h1> tag, the navigation list items also all of the subheadings within the page content. The link to this web font is given at the top of each HTML page to ensure that this font is used throughout the site.The next task was to create the navigation bar to be used across all of the pages. I began by creating an un-ordered list in the HTML index page*. Each list item contained a ‘href’ to another page within the site to allow the user to easily navigate their way between the pages. I then used the <div> tags to separate this piece of code from the rest* and classed it as “nav”. This meant that when I styled the navigation bar in the stylesheet I could easily do this using the class specified. In the stylesheet I used the ‘. nav’ class five times*. The ‘. nav ul’ class was used to style the un-ordered list as a whole such as background colour and list style. The ‘. nav li’ class was used to style the list items specifically such as padding and text-decoration. I used the ‘. nav a’ class to style elements inside the list. Furthermore I used ‘. nav li a:hover’ to create a hover effect within the interface so that when the user is moving their mouse across the navigation buttons they can see which one they are clicking on. Finally I used the ‘. nav li: last-child’ class ensure that there was no border to the right of the last link in the navigation, otherwise it would not match the first link element which has no border to the left of itself.Once the main layout for the pages was complete, I copied the code developed in the index into every other html page to ensure they all had the exact same layout.I then began to develop my index page. I already had my full name at the top of the page and links to my other pages within the site. Therefore the last thing to add was an image of myself. I added the image I wanted into the image folder and then below the navigation list in the HTML I added an <img> tag, which included the source and the class for the picture. Then when I went into the stylesheet I used the ‘img.Me’ class to specify a height, width, display and margin for the image*.CVWith the index page completed I moved onto the CV.html page. I started by making all of my subheadings such as ‘Education’ and ‘Professional Experience’. I used the <h3> tag for these headers as will have for all of the subheadings within the site. In the stylesheet I then specified the font family and colour (the same as the <h1> tag). The next step was to add in the main content below the subheadings and so I used <p> tags to add in main content. To enable myself to make changes to certain pieces of text, I used 2 different classes within the <p> tags, which I named ‘sub-subheading’ and ‘grades’. In the stylesheet I was then able to reference these to make certain changes such as line-height, font eight and text-indent*.To ensure the headings where close to the text, I edited the line height in the paragraph class in the CSS.BioStarting off with the general house style text or all of the pages, I began by adding in an ‘About Me’ header for the page using the <h2> tag as shown in the CV.html page to ensure it matched. Below this I then decided to add in my main content, my short biography. I done this using the <p> tags to break my text into nicely formatted paragraphs.After deciding that my page looked slightly bare, I thought I would add some special elements into it to make it more enjoyable for the user to read, therefore I decided to add in a bold quote standing out on the right hand side of the page. For this I used the <blockquote> tag*. In my CSS page I then floated this to the right, added some borders (to separate it from the rest of the text on the page), change the font style and the size and finally added in the appropriate margins for it.To accompany the quote I decided to add in an image of a painting I had recently done, to tell the user abit more about myself, and accompany the biography I had written. I imported the image into my images folder and added an image link into the HTML above the blockquote.ContactI began structuring this page with the basic elements it would need*, including text inputs and text areas. I used the <input> tag for all elements where there would be text inputted. For each of these I specified a size and max length of text which could be inputted. Next I used the <textarea> tag for the message section at the bottom of the contact page, again for this I specified the amount of columns and rows I wanted available in the box.I wanted to have two sides to the page*, and so I used two <div> tags and classed them, then in the CSS I specified them to float left with a width of 50% so that they would sit uniform next to each other.To give the page more character I added <legend> tags* for adding a title to the border of these blocks of information.To get icons on the right hand side of the page for my contact details, I used Font Awesome*. Between the head tags I added the link to the site*, and then nested in the <div> tags, I added <i> tags (widely used for icons). Within these where the links to the specific icons I wanted to use.To ensure the text sat directly next to the icon, I placed paragraph tags (<p>) around the <i> tags and added the text between them.After adding all of the essential elements I began styling the page. A simple addition to the page was adding a hover colour in the CSS to the submit button.To minimise the amount of space used on the page, I decided to make the name of the information to be submitted in each box sit actually inside the box. This was done using the <placeholder> tags*.